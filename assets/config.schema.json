{
  "gptbrushes.defaultRequestOptions": {
    "type": "object",
    "description": "Override the default request options for all brushes",
    "properties": {
      "model": {
        "type": "string",
        "default": "gpt-4",
        "description": "The model to use."
      },
      "suffix": {
        "type": "string",
        "description": "The suffix to append to the prompt."
      },
      "max_tokens": {
        "type": "number",
        "description": "The maximum number of tokens to generate."
      },
      "temperature": {
        "type": "number",
        "description": "The temperature to use for sampling."
      },
      "top_p": {
        "type": "number",
        "description": "The top p value to use for sampling."
      },
      "n": {
        "type": "number",
        "description": "The number of samples to generate."
      },
      "stream": {
        "type": "boolean",
        "description": "Whether to stream the output."
      },
      "logprobs": {
        "type": "number",
        "description": "The number of logprobs to return."
      },
      "echo": {
        "type": "boolean",
        "description": "Whether to include the prompt in the output."
      },
      "stop": {
        "type": "array",
        "description": "The string(s) that will stop the output.",
        "items": {
          "type": "string"
        }
      },
      "presence_penalty": {
        "type": "number",
        "description": "The presence penalty."
      },
      "frequency_penalty": {
        "type": "number",
        "description": "The frequency penalty."
      },
      "best_of": {
        "type": "number",
        "description": "The number of best-of samples to return."
      },
      "logit_bias": {
        "type": "string",
        "description": "This should be an object but it was easier to make it a JSON string because of the dynamic type. OpenAI explanation: Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated."
      },
      "user": {
        "type": "string",
        "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids)."
      }
    },
    "default": {
      "model": "gpt-4",
      "temperature": 0.5,
      "max_tokens": 500
    }
  },
  "categories": {
    "type": "array",
    "items": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "icon": {
          "type": "string",
          "description": "The category icon, e.g. 'book' or 'bug' or any other `codicon` id."
        }
      },
      "required": ["name"],
      "default": {
        "name": "My Category",
        "icon": "book"
      }
    },
    "default": [
      {
        "name": "Explain",
        "icon": "book"
      },
      {
        "name": "Solve",
        "icon": "bug"
      },
      {
        "name": "Conventions and style",
        "icon": "paintcan"
      },
      {
        "name": "Refactor",
        "icon": "symbol-namespace"
      }
    ],
    "description": "Categories for the brushes"
  },
  "gptbrushes.brushes": {
    "type": "array",
    "items": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the brush"
        },
        "icon": {
          "type": "string",
          "description": "Emoji to display as the brush's icon"
        },
        "category": {
          "type": "string",
          "description": "A category defined in categories",
          "default": "Uncategorized"
        },
        "prompt": {
          "type": "string",
          "description": "The main prompt, in the case of type==chat then it's the system prompt."
        },
        "messages": {
          "type": "array",
          "item": {
            "type": "object",
            "properties": {
              "role": {
                "type": "string"
              },
              "content": {
                "type": "string"
              }
            }
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the variable. `user_code` is reserved."
              },
              "defaultValue": {
                "type": "string",
                "description": "Default value of the variable"
              },
              "description": {
                "type": "string",
                "description": "Description of the variable"
              }
            },
            "required": ["name", "description"]
          },
          "description": "Variables to be used in the prompts."
        },
        "requestOptions": {
          "type": "object",
          "description": "overload the default request options for this brush",
          "properties": {
            "model": {
              "type": "string",
              "default": "gpt-4",
              "description": "The model to use."
            },
            "suffix": {
              "type": "string",
              "default": "",
              "description": "The suffix to append to the prompt."
            },
            "max_tokens": {
              "type": "number",
              "default": 0,
              "description": "The maximum number of tokens to generate."
            },
            "temperature": {
              "type": "number",
              "default": 0,
              "description": "The temperature to use for sampling."
            },
            "top_p": {
              "type": "number",
              "default": 0,
              "description": "The top p value to use for sampling."
            },
            "n": {
              "type": "number",
              "default": 0,
              "description": "The number of samples to generate."
            },
            "stream": {
              "type": "boolean",
              "default": false,
              "description": "Whether to stream the output."
            },
            "logprobs": {
              "type": "number",
              "default": 0,
              "description": "The number of logprobs to return."
            },
            "echo": {
              "type": "boolean",
              "default": false,
              "description": "Whether to include the prompt in the output."
            },
            "stop": {
              "type": "string",
              "default": "",
              "description": "The string to stop the output."
            },
            "presence_penalty": {
              "type": "number",
              "default": 0,
              "description": "The presence penalty."
            },
            "frequency_penalty": {
              "type": "number",
              "default": 0,
              "description": "The frequency penalty."
            },
            "best_of": {
              "type": "number",
              "default": 0,
              "description": "The number of best-of samples to return."
            },
            "logit_bias": {
              "type": "string",
              "default": "",
              "description": "The token-level logit biases."
            },
            "user": {
              "type": "string",
              "default": "",
              "description": "The user"
            }
          }
        }
      },
      "required": ["name", "icon", "prompt"]
    },
    "default": [
      {
        "name": "Add Tests",
        "icon": "beaker",
        "prompt": "Please add tests to the code provided by the user. Answer directly with the test cases. Do not use a markdown code block. You can add some comments if it's not immediately clear what the test does. Write the tests for the code as it is, not for the code you would write. Write the tests for the {{framework}} framework.",
        "variables": [
          {
            "name": "framework",
            "description": "Which framework should the tests be written for?"
          }
        ]
      },
      {
        "name": "Add Documentation",
        "category": "Explain",
        "icon": "book",
        "prompt": "Please add documentation to the code."
      },
      {
        "name": "Explain with comments",
        "category": "Explain",
        "icon": "comment",
        "prompt": "Please add code comments to the code."
      },
      {
        "name": "Fix Bugs",
        "category": "Solve",
        "icon": "bug",
        "prompt": "Identify and fix bugs in the code provided by the user. Answer directly with the fixed code. Do not use a markdown code block. You can add a code comment to explain the fix."
      },
      {
        "name": "Add Types",
        "category": "Conventions and style",
        "icon": "symbol-namespace",
        "prompt": "Please add type annotations to the code provided by the user."
      },
      {
        "name": "Translate to German",
        "icon": "case-sensitive",
        "category": "Conventions and style",
        "prompt": "Translate the user text to German."
      },
      {
        "name": "Translate to English",
        "icon": "case-sensitive",
        "category": "Conventions and style",
        "prompt": "Translate the user text to English."
      },
      {
        "name": "Refactor Code",
        "icon": "symbol-namespace",
        "category": "Refactor",
        "prompt": "Improve the user code by refactoring it."
      },
      {
        "name": "Custom Brush",
        "icon": "paintcan",
        "category": "Uncategorized",
        "prompt": "{{prompt}}",
        "variables": [
          {
            "name": "prompt",
            "description": "Please describe the brush."
          }
        ]
      }
    ],
    "description": "The available brushes, including their names, categories, icons, and prompts"
  }
}
